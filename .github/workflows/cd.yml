name: CD

on:
  workflow_dispatch:
  push:
    tags:
      - v*

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.gh-release.outputs.id }}
    steps:
      - name: Checkout release tag
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Set up Python
        uses: actions/setup-python@b55428b1882923874294fa556849718a1d7f2ca5
        with:
          python-version: '3.x'

      - name: Witness Run
        uses: testifysec/witness-run-action@v0.1
        with:
          step: build
          enable-archivista: false
          enable-sigstore: false
          command: /bin/sh -c make build

      - id: gh-release
        name: Publish GitHub release candiate
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        with:
          name: ${{ github.ref_name }}-rc
          tag_name: ${{ github.ref }}
          body: "demo-package version ${{ github.ref_name }}"
          files: dist/*

      - name: Store built artifacts
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
        # NOTE: The GitHub release page contains the release artifacts too, but using
        # GitHub upload/download actions seems robuster: there is no need to compute
        # download URLs and tampering with artifacts between jobs is more limited.
        with:
          name: built-artifacts
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    environment: release
    steps:
      - name: Fetch build artifacts
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: built-artifacts
          path: dist

      - name: Set artifacts information
        run: |
           echo "WHL_NAME=$(ls dist/*whl | awk -F '/' '{ print $NF }')" >> $GITHUB_ENV
           echo "TAR_NAME=$(ls dist/*tar.gz | awk -F '/' '{ print $NF }')" >> $GITHUB_ENV
           echo "WHL_SHASUM=$(shasum -a 256 dist/*whl | awk '{ print $1 }')" >> $GITHUB_ENV
           echo "TAR_SHASUM=$(shasum -a 256 dist/*tar.gz | awk '{ print $1 }')" >> $GITHUB_ENV
           echo "WHL_LENGTH=$(du -b dist/*whl | awk '{ print $1 }')" >> $GITHUB_ENV
           echo "TAR_LENGTH=$(du -b dist/*tar.gz | awk '{ print $1 }')" >> $GITHUB_ENV

      - name: Add to TUF Metadata Repository (RSTUF)
        id: rstuf
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.rstuf.kairo.dev/api/v1/artifacts/'
          method: 'POST'
          escapeData: 'true'
          customHeaders: '{"apikey": "${{ secrets.RSTUF_TARGETS_TOKEN }}"}'
          data: >-
            {
              "targets": [
                {
                  "info": {
                    "length": ${{ env.WHL_LENGTH }},
                    "hashes": {"sha256": "${{ env.WHL_SHASUM }}"}
                  },
                  "path": "${{ github.ref_name }}/${{ env.WHL_NAME }}"
                },
                {
                  "info": {
                    "length": ${{ env.TAR_LENGTH }},
                    "hashes": {"sha256": "${{ env.TAR_SHASUM }}"}
                },
                  "path": "${{ github.ref_name }}/${{ env.TAR_NAME }}"
                }
              ]
            }

      - name: Log Response
        run: |
          echo ${{ steps.rstuf.outputs.response }}

      - name: Finalize GitHub release
        uses: actions/github-script@c713e510dbd7d213d92d41b7a7805a986f4c5c66
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: '${{ needs.build.outputs.release_id }}',
              name: '${{ github.ref_name }}',
            })
